<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>集成学习-投票法</title>
      <link href="2021/04/14/voting/"/>
      <url>2021/04/14/voting/</url>
      
        <content type="html"><![CDATA[<h2 id="投票法的基本思路"><a href="#投票法的基本思路" class="headerlink" title="投票法的基本思路"></a>投票法的基本思路</h2><p>融合多个数据降低误差。  </p><h2 id="投票法的原理分析"><a href="#投票法的原理分析" class="headerlink" title="投票法的原理分析"></a>投票法的原理分析</h2><p>投票法是一种遵循少数服从多数原则的集成学习模型，通过多个模型的集成降低方差，从而提高模型的鲁棒性。理想情况下，投票法的预测效果优于任何一个基模型的预测效果。<br>投票法在回归模型与分类模型上均可使用：  </p><ul><li>回归投票法：预测结果是所有模型预测结果的平均值。  </li><li>分类投票法：预测结果是所有模型中出现最多的预测结果。</li></ul><p>分类投票法又可以划分为硬投票与软投票：  </p><ul><li>硬投票：预测结果是所有投票结果最多出现的类。</li><li>软投票：预测结果是所有投票结果中出现概率加和最大的类。</li></ul><p>例子：<br> 硬投票：对于某个样本 ，模型1的预测结果是A， 模型2的预测结果是B，模型3的预测结果是B。 硬投票法的预测结果是B。<br> 软投票：model 1 类型A的概率是99%，model 2 类型A的概率是49%，model 3类型A的概率是49%。 A的预测概率的平均是（99+49+49）/3 = 65.67%。<br> 软投票考虑到预测概率这一额外信息，因此比硬投票法更加准确的预测结果。  </p><p>在投票法中，需要考虑到不同的基模型可能产生的影响。理论上，基模型可以是任何已被训练好的模型，在实际应用上，想要投票法产生较好的结果，需要满足两个条件：  </p><ul><li>基模型之间的效果不能差别过大，当某个及模型相对于其他基模型效果过差时，该模型很可能成为噪声。</li><li>基模型之间应该有较小的同质性， 例如在基模型预测效果近似的情况下，基于树模型与线性模型的投票，往往优于两个树模型或两个线性模型。</li></ul><p>当投票集合中使用的模型能预测出清晰的类别标签时，适合使用硬投票。<br>当投票集合使用的模型能预测类别的概率时，适合使用软投票。软投票同样可以用于那些本身并不预测类成员概率的模型，只要他们可以输出类似于概率的预测分数值（SVM，k-最近邻和决策树）</p><h2 id="投票法案例"><a href="#投票法案例" class="headerlink" title="投票法案例"></a>投票法案例</h2><p>sklearn中两种投票方法 VotingRegressor和VotingClassifier两个投票方法。这两种模型的操作方式相同，并采用相同的参数，使用模型需要提供一个模型列表，列表中每个模型采用Tuple的结构表示，第一个元素代表名称，第二个元素代表模型，需要保证每个模型必须拥有唯一的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建1000个样本，20个特征的随机数据集</span></span><br><span class="line"><span class="comment"># test classification dataset</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="comment"># define dataset</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dataset</span>():</span></span><br><span class="line">    X, y = make_classification(n_samples = <span class="number">1000</span>, n_features = <span class="number">20</span>, n_informative = <span class="number">15</span>, n_redundant=<span class="number">5</span>, random_state = <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># summarize the dataset</span></span><br><span class="line">    <span class="keyword">return</span> X,y</span><br><span class="line">X,y = get_dataset() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多个KNN模型作为基模型演示投票法，其中每个模型采用不同邻居值K参数：</span></span><br><span class="line"><span class="comment"># get a voting ensemble of models</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_voting</span>():</span></span><br><span class="line">    <span class="comment"># define the base models</span></span><br><span class="line">    models = <span class="built_in">list</span>()</span><br><span class="line">    models.append((<span class="string">&#x27;knn1&#x27;</span>, KNeighborsClassifier(n_neighbors = <span class="number">1</span>)))</span><br><span class="line">    models.append((<span class="string">&#x27;knn3&#x27;</span>, KNeighborsClassifier(n_neighbors = <span class="number">3</span>)))</span><br><span class="line">    models.append((<span class="string">&#x27;knn5&#x27;</span>, KNeighborsClassifier(n_neighbors = <span class="number">5</span>)))</span><br><span class="line">    models.append((<span class="string">&#x27;knn7&#x27;</span>, KNeighborsClassifier(n_neighbors = <span class="number">7</span>)))</span><br><span class="line">    models.append((<span class="string">&#x27;knn9&#x27;</span>, KNeighborsClassifier(n_neighbors = <span class="number">9</span>)))</span><br><span class="line">    <span class="comment"># define the voting ensemble</span></span><br><span class="line">    ensemble = VotingClassifier(estimators = models, voting = <span class="string">&quot;hard&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ensemble</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型列表，包括每个基模型和硬投票模型</span></span><br><span class="line"><span class="comment"># get a list of models to evaluate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_models</span>():</span></span><br><span class="line">    models = <span class="built_in">dict</span>()</span><br><span class="line">    models[<span class="string">&#x27;knn1&#x27;</span>] = KNeighborsClassifier(n_neighbors = <span class="number">1</span>)</span><br><span class="line">    models[<span class="string">&#x27;knn3&#x27;</span>] = KNeighborsClassifier(n_neighbors = <span class="number">3</span>)</span><br><span class="line">    models[<span class="string">&#x27;knn5&#x27;</span>] = KNeighborsClassifier(n_neighbors = <span class="number">5</span>)</span><br><span class="line">    models[<span class="string">&#x27;knn7&#x27;</span>] = KNeighborsClassifier(n_neighbors = <span class="number">7</span>)</span><br><span class="line">    models[<span class="string">&#x27;knn9&#x27;</span>] = KNeighborsClassifier(n_neighbors = <span class="number">9</span>)</span><br><span class="line">    models[<span class="string">&#x27;hard_voting&#x27;</span>] = get_voting()</span><br><span class="line">    <span class="keyword">return</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># evaluate a give model using cross_valiation</span></span><br><span class="line"><span class="comment"># 分层10倍交叉验证三次重复的分数列表的形式返回</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span>  RepeatedStratifiedKFold</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_model</span>(<span class="params">model,X,y</span>):</span></span><br><span class="line">    cv = RepeatedStratifiedKFold(n_splits = <span class="number">10</span>, n_repeats = <span class="number">3</span>, random_state = <span class="number">1</span>)</span><br><span class="line">    scores = cross_val_score(model, X, y ,scoring = <span class="string">&quot;accuracy&quot;</span>, cv = cv, n_jobs = -<span class="number">1</span>, error_score = <span class="string">&quot;raise&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> scores</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">models = get_models()</span><br><span class="line">results, names = <span class="built_in">list</span>(), <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> name, model <span class="keyword">in</span> models.items():</span><br><span class="line">    scores = evaluate_model(model,X,y)</span><br><span class="line">    results.append(scores)</span><br><span class="line">    names.append(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;%s %.3f (%.3f)&quot;</span>%(name, np.mean(scores), np.std(scores)))</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line">pyplot.boxplot(results, labels = names, showmeans = <span class="literal">True</span>)</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><p><img src="voting_result.png" alt="voting_result"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/09/hello-world/"/>
      <url>2021/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
